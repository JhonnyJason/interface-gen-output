// Generated by CoffeeScript 2.6.1
//###########################################################
//region debug
var addRoute, createArgsBlock, definitionEndKey, definitionStartKey, extractFromSlice, extractInterface, file, interfaceObject, log, olog, requestKey, responseKey, routeDetect, routeKey, sliceFile, slices;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("documentationparser"));

import fs from "fs";

import * as HJSON from "hjson";

import * as ph from "./pathhandlermodule.js";

import {
  LinkedMap
} from "./linkedmapmodule.js";

//endregion

  //###########################################################
export var DocumentationFile = class DocumentationFile {
  constructor() {
    var err;
    try {
      this.data = new LinkedMap();
      this.path = ph.getDocumentationFilePath();
      this.fileString = fs.readFileSync(this.path, "utf-8");
      log("constructed DocumentationFile");
      this.exists = true;
    } catch (error) {
      err = error;
      log(err);
      log("documentation File not appropriately constructed!");
      this.exists = false;
    }
  }

  parse() {
    var cObj, i, id, idx, len, line, ref;
    if (!this.exists) {
      throw new Error("Documentation File does not exist!");
    }
    log("real implementation here!");
    this.lines = this.fileString.split("\n");
    log(this.lines.length);
    ref = this.lines;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      line = ref[idx];
      id = "" + idx;
      cObj = {id, line};
      this.data.append(id, cObj);
    }
    log(this.data.size);
  }

};

//###########################################################
file = "";

slices = [];

//###########################################################
interfaceObject = {
  routes: []
};

//###########################################################
//region patterns
routeDetect = /^[a-z0-9]+/i;

//###########################################################
routeKey = "### /";

requestKey = "#### request";

responseKey = "#### response";

definitionStartKey = "```json";

definitionEndKey = "```";

//endregion

//###########################################################
//region internalFunctions
sliceFile = function() {
  var index, nextIndex;
  index = file.indexOf(routeKey);
  while (index >= 0) {
    index += routeKey.length;
    nextIndex = file.indexOf(routeKey, index);
    if (nextIndex < 0) {
      slices.push(file.slice(index));
    } else {
      slices.push(file.slice(index, nextIndex));
    }
    index = nextIndex;
  }
};

//###########################################################
extractInterface = function() {
  var i, len, slice;
  for (i = 0, len = slices.length; i < len; i++) {
    slice = slices[i];
    extractFromSlice(slice);
  }
};

extractFromSlice = function(slice) {
  var requestDefinition, requestDefinitionEnd, requestDefinitionStart, requestDefinitionString, requestIndex, responseDefinitionEnd, responseDefinitionStart, responseDefinitionString, responseIndex, route;
  route = routeDetect.exec(slice);
  requestIndex = slice.indexOf(requestKey);
  if (requestIndex < 0) {
    throw new Error("File Corrupt! Expected '#### request' in route slice!");
  }
  requestIndex += requestKey.length;
  requestDefinitionStart = slice.indexOf(definitionStartKey, requestIndex);
  if (requestDefinitionStart < 0) {
    throw new Error("File Corrupt! Expected '```json' to start request definition!");
  }
  requestDefinitionStart += definitionStartKey.length;
  requestDefinitionEnd = slice.indexOf(definitionEndKey, requestDefinitionStart);
  if (requestDefinitionEnd < 0) {
    throw new Error("File Corrupt! Expected '```' to end request definition!");
  }
  responseIndex = slice.indexOf(responseKey, requestDefinitionEnd);
  if (responseIndex < 0) {
    throw new Error("File Corrupt! Expected '#### response' definition in route slice!");
  }
  responseIndex += responseKey.length;
  responseDefinitionStart = slice.indexOf(definitionStartKey, responseIndex);
  if (responseDefinitionStart < 0) {
    throw new Error("File Corrupt! Expected '```json' to start response definition!");
  }
  responseDefinitionStart += definitionStartKey.length;
  responseDefinitionEnd = slice.indexOf(definitionEndKey, responseDefinitionStart);
  if (responseDefinitionEnd < 0) {
    throw new Error("File Corrupt! Expected '```' to end response definition!");
  }
  requestDefinitionString = slice.slice(requestDefinitionStart, requestDefinitionEnd);
  requestDefinition = HJSON.parse(requestDefinitionString);
  responseDefinitionString = slice.slice(responseDefinitionStart, responseDefinitionEnd);
  addRoute(route, Object.keys(requestDefinition), responseDefinitionString);
};

//###########################################################
addRoute = function(routeName, requestArgs, sampleResponse) {
  var routeObject;
  routeObject = {
    route: routeName,
    args: requestArgs.join(", "),
    requestBlock: "\"" + requestArgs.join("\": \"...\", \n\"") + "\": \"...\"",
    argsBlock: createArgsBlock(requestArgs),
    response: sampleResponse
  };
  interfaceObject.routes.push(routeObject);
};

//###########################################################
createArgsBlock = function(argsArray) {
  return argsArray.map(function(el) {
    return "req.body." + el;
  }).join(", ");
};

//endregion
