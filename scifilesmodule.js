// Generated by CoffeeScript 2.6.1
//#############################################################################
//region debug
var getHandlersFileName, getMissingRoutes, getRoutesFileName, handlerFunctionSignatureTemplate, handlersTemplate, log, olog, routesTemplate, writeHandlersFile, writeRoutesFile;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("scifilesmodule"));

import fs from "fs";

import M from "mustache";

import * as p from "./pathhandlermodule.js";

//endregion

//###########################################################
//region templates
routesTemplate = `import * as h from "./{{{name}}}handlers"

{{#routes}}
############################################################
sciroutes.{{route}} = (req, res) ->
    try
        response = await h.{{route}}({{argsBlock}})
        res.send(response)
    catch err then res.send({error: err.stack})
    return

{{/routes}}`;

handlersTemplate = `{{#routes}}
############################################################
scihandlers.{{route}} = ({{args}}) ->
    result = {}
    ###
    {{{response}}}
    ###
    return result


{{/routes}}`;

handlerFunctionSignatureTemplate = "scihandlers.{{route}} = ({{args}}) ->";

//endregion

//###########################################################
//region internalFunctions
getRoutesFileName = function(name) {
  var l;
  name = name.toLowerCase();
  l = "interface".length; // get rid of "interface" postfix
  if (name.indexOf("interface") > 0) {
    name = name.slice(0, name.length - l);
  }
  if (name.indexOf("routes") < 0) {
    name = name + "routes";
  }
  return name;
};

getHandlersFileName = function(name) {
  var l;
  name = name.toLowerCase();
  l = "interface".length; // get rid of "interface" postfix
  if (name.indexOf("interface") > 0) {
    name = name.slice(0, name.length - l);
  }
  if (name.indexOf("handlers") < 0) {
    name = name + "handlers";
  }
  return name;
};

//###########################################################
writeRoutesFile = function(interfaceObject, name) {
  var routesFile, routesFilePath, routesName;
  routesName = getRoutesFileName(name);
  routesFile = M.render(routesTemplate, interfaceObject);
  routesFilePath = p.getFilePath(routesName + ".coffee");
  fs.writeFileSync(routesFilePath, routesFile);
};

writeHandlersFile = function(interfaceObject, name) {
  var err, handlersFile, handlersFilePath, handlersName, newInterfaceObject, oldFile, routes;
  handlersName = getHandlersFileName(name);
  handlersFilePath = p.getFilePath(handlersName + ".coffee");
  newInterfaceObject = null;
  try {
    oldFile = fs.readFileSync(handlersFilePath, "utf8");
    routes = getMissingRoutes(interfaceObject.routes, oldFile);
    newInterfaceObject = {routes};
    handlersFile = oldFile + M.render(handlersTemplate, newInterfaceObject);
  } catch (error) {
    err = error;
    handlersFile = M.render(handlersTemplate, interfaceObject);
  }
  fs.writeFileSync(handlersFilePath, handlersFile);
};

//###########################################################
getMissingRoutes = function(routes, file) {
  var funSignature, i, len, missing, route;
  missing = [];
  for (i = 0, len = routes.length; i < len; i++) {
    route = routes[i];
    funSignature = M.render(handlerFunctionSignatureTemplate, route);
    if (file.indexOf(funSignature) < 0) {
      missing.push(route);
    }
  }
  return missing;
};

//endregion

//###########################################################
export var writeFiles = function(interfaceObject, name) {
  log("writeFiles");
  writeRoutesFile(interfaceObject, name);
  writeHandlersFile(interfaceObject, name);
};
