// Generated by CoffeeScript 2.5.1
(function() {
  var cfg, extractEndpointDefinition, fs, log, mainprocessmodule, olog, ostr, path, print;

  mainprocessmodule = {
    name: "mainprocessmodule"
  };

  //region logPrintFunctions
  //#############################################################################
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["mainprocessmodule"] != null) {
      console.log("[mainprocessmodule]: " + arg);
    }
  };

  olog = function(o) {
    return log("\n" + ostr(o));
  };

  ostr = function(o) {
    return JSON.stringify(o, null, 4);
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //#############################################################################
  //region modulesFromEnvironment
  path = require("path");

  fs = require("fs");

  cfg = null;

  //endregion

  //#############################################################################
  mainprocessmodule.initialize = function() {
    log("mainprocessmodule.initialize");
    cfg = allModules.configmodule;
  };

  
  //#############################################################################
  //region internalFunctions
  extractEndpointDefinition = function(slice) {
    var definitionEndKey, definitionStartKey, requestDefinition, requestDefinitionEnd, requestDefinitionStart, requestIndex, requestKey, responseDefinition, responseDefinitionEnd, responseDefinitionStart, responseIndex, responseKey, route, routeDetect;
    routeDetect = /^[a-z0-9]+/i;
    route = routeDetect.exec(slice);
    log(route);
    requestKey = "#### request";
    responseKey = "#### response";
    definitionStartKey = "```json";
    definitionEndKey = "```";
    requestIndex = slice.indexOf(requestKey);
    if (requestIndex < 0) {
      throw new Error("File Corrupt! Expected '#### request' in route slice!");
    }
    requestIndex += requestKey.length;
    requestDefinitionStart = slice.indexOf(definitionStartKey, requestIndex);
    if (requestDefinitionStart < 0) {
      throw new Error("File Corrupt! Expected '```json' to start request definition!");
    }
    requestDefinitionStart += definitionStartKey.length;
    requestDefinitionEnd = slice.indexOf(definitionEndKey, requestDefinitionStart);
    if (requestDefinitionEnd < 0) {
      throw new Error("File Corrupt! Expected '```' to end request definition!");
    }
    responseIndex = slice.indexOf(responseKey, requestDefinitionEnd);
    if (responseIndex < 0) {
      throw new Error("File Corrupt! Expected '#### response' definition in route slice!");
    }
    responseIndex += responseKey.length;
    responseDefinitionStart = slice.indexOf(definitionStartKey, responseIndex);
    if (responseDefinitionStart < 0) {
      throw new Error("File Corrupt! Expected '```json' to start response definition!");
    }
    responseDefinitionStart += definitionStartKey.length;
    responseDefinitionEnd = slice.indexOf(definitionEndKey, responseDefinitionStart);
    if (responseDefinitionEnd < 0) {
      throw new Error("File Corrupt! Expected '```' to end response definition!");
    }
    requestDefinition = slice.slice(requestDefinitionStart, requestDefinitionEnd);
    log(requestDefinition);
    responseDefinition = slice.slice(responseDefinitionStart, responseDefinitionEnd);
    log(responseDefinition);
  };

  //endregion

  //#############################################################################
  //region exposedFunctions
  mainprocessmodule.execute = function(e) {
    var definitionFile, i, index, len, nextIndex, routeKey, slice, slices, src;
    log("mainprocessmodule.execute");
    src = path.resolve(e.source); // we want to deal with absolute paths only
    log(src);
    log(e.name);
    routeKey = "### /";
    //# TODO check if file exists?
    definitionFile = fs.readFileSync(src, 'utf8');
    slices = [];
    index = definitionFile.indexOf(routeKey);
    while (index >= 0) {
      index += routeKey.length;
      nextIndex = definitionFile.indexOf(routeKey, index);
      if (nextIndex < 0) {
        slices.push(definitionFile.slice(index));
      } else {
        slices.push(definitionFile.slice(index, nextIndex));
      }
      index = nextIndex;
    }
    log("- - -");
    for (i = 0, len = slices.length; i < len; i++) {
      slice = slices[i];
      extractEndpointDefinition(slice);
    }
  };

  //endregion
  module.exports = mainprocessmodule;

}).call(this);
