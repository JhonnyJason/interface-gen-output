// Generated by CoffeeScript 2.6.1
//###########################################################
//region debug
var StateGuardian, log, olog, stateGuardians;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("stateguardianmodule"));

//endregion

//###########################################################
stateGuardians = [];

//###########################################################
StateGuardian = class StateGuardian {
  constructor(states, id1) {
    var fromStateId, i, id, len, state, toStateId;
    this.id = id1;
    // log "constructor: " + states
    this.idToState = ["initial"];
    this.stateToId = {
      initial: 0
    };
    this.currentStateId = 0;
    this.currentStateName = "initial";
    this.stateTransitionMap = [];
    this.idToEnterFunctions = [];
    this.idToExitFunctions = [];
    if (!states) {
      return;
    }
    id = 1;
    for (i = 0, len = states.length; i < len; i++) {
      state = states[i];
      this.idToState[id] = state;
      this.idToApplyFuctions[id] = void 0;
      this.stateToId[state] = id;
      id++;
    }
    for (fromStateId in this.idToState) {
      this.stateTransitionMap[fromStateId] = [];
      for (toStateId in this.idToState) {
        this.stateTransitionMap[fromStateId][toStateId] = void 0;
      }
    }
  }

  
    // setStateTo: (state) ->
  //     id = @getStateId(state)
  //     name = @idToState[id]

    //     @currentStateName = name
  //     @currentStateId =  id

    //     if @idToApplyFuctions[id]? then @idToApplyFuctions[id]() 
  //     @printCurrentState()
  stateTransitionTo(state) {
    var toStateId;
    if (state === this.currentStateId || state === this.currentStateName) {
      return;
    }
    this.printCurrentState();
    log("stateTransitionTo: " + state);
    if (!(this.currentStateId != null) || !(this.currentStateName != null)) {
      log("Error: cannot do state Transition from non valid initial State!");
      this.printCurrentState();
      return;
    }
    toStateId = this.getStateId(state);
    if (this.stateTransitionMap[this.currentStateId][toStateId] != null) {
      this.stateTransitionMap[this.currentStateId][toStateId]();
      return this.setStateTo(toStateId);
    }
  }

  addState(state) {}

  removeState(state) {}

  setVerbosityLevel(verbosity) {}

  addStateTransition(fromState, toState, transitionFunction) {
    var fromStateId, toStateId;
    fromStateId = this.getStateId(fromState);
    toStateId = this.getStateId(toState);
    log("state Transition: " + fromStateId + " -> " + toStateId);
    return this.stateTransitionMap[fromStateId][toStateId] = transitionFunction;
  }

  setApplyStateFunction(state, func) {
    var stateId;
    stateId = this.getStateId(state);
    return this.idToApplyFuctions[stateId] = func;
  }

  getStateId(state) {
    var id;
    if (typeof state === "string") {
      id = this.stateToId[state];
      if (id != null) {
        return id;
      }
      log("Error state " + state + " was not found!");
    } else if (typeof state === "number") {
      if (this.idToState.length > state) {
        return state;
      }
      log("Error id " + state + "was not found!");
    }
  }

  printAllStates() {
    var i, len, printstring, ref, state;
    printstring = "";
    ref = this.idToState;
    for (i = 0, len = ref.length; i < len; i++) {
      state = ref[i];
      printstring += "state: " + state + " id: " + this.stateToId[state] + "\n";
    }
    return log(printstring);
  }

  printCurrentState() {
    log("currentStateId: " + this.currentStateId);
    return log("currentStateName: " + this.currentStateName);
  }

};

//###########################################################
export var createStateGuardian = function(states) {
  var id, stateGuardian;
  log("createStateGuardian");
  id = stateGuardians.length;
  stateGuardian = new StateGuardian(states, id);
  stateGuardians.push(stateGuardian);
  return stateGuardian;
};
