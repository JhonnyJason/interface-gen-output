// Generated by CoffeeScript 2.6.1
//###########################################################
//region debug
var DocumentationHeadObject, HandlersHeadObject, InterfaceHeadObject, log, olog;

import {
  createLogFunctions
} from "thingy-debug";

({log, olog} = createLogFunctions("headobject"));

//endregion

  //###########################################################
//region internal classes
DocumentationHeadObject = class DocumentationHeadObject {
  constructor(headLines1) {
    this.headLines = headLines1;
    this.headBlock = this.headLines.join("\n");
    this.titleLine = this.headLines[0];
    this.descriptionLines = this.headLines.slice(1);
  }

  toInterface() {
    var i, len, line, lines, ref;
    ref = this.headLines;
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      lines = "# " + line;
    }
    return new InterfaceHeadObject(lines);
  }

  toHandlers() {
    var i, len, line, lines, ref;
    ref = this.headLines;
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      lines = "# " + line;
    }
    return new HandlersHeadObject(lines);
  }

};

InterfaceHeadObject = class InterfaceHeadObject {
  constructor(headLines1) {
    this.headLines = headLines1;
    this.headBlock = this.headLines.join("\n");
    this.titleLine = this.headLines[0];
    this.descriptionLines = headLines.slice(1);
  }

  toHandlers() {
    return new HandlersHeadObject(this.headLines);
  }

  toDocumentation() {
    var i, len, line, lines, ref;
    ref = this.headLines;
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      lines = line.slice(2);
    }
    return new DocumentationHeadObject(lines);
  }

};

HandlersHeadObject = class HandlersHeadObject {
  constructor(headLines1) {
    this.headLines = headLines1;
    this.headBlock = this.headLines.join("\n");
    this.titleLine = this.headLines[0];
    this.descriptionLines = headLines.slice(1);
  }

  toDocumentation() {
    var i, len, line, lines, ref;
    ref = this.headLines;
    for (i = 0, len = ref.length; i < len; i++) {
      line = ref[i];
      lines = line.slice(2);
    }
    return new DocumentationHeadObject(lines);
  }

  toInterface() {
    return new InterfaceHeadObject(this.headLines);
  }

};

//endregion

  //###########################################################
export var HeadObject = class HeadObject {
  constructor() {
    this.documentation = null;
    this.interface = null;
    this.handlers = null;
  }

  //###########################################################
  setDocumentationHeadLines(headLines) {
    this.documentation = new DocumentationHeadObject(headLines);
  }

  setInterfaceHeadLines(headLines) {
    this.interface = new InterfaceHeadObject(headLines);
  }

  setHandlersHeadLines(headLines) {
    this.handlers = new HandlersHeadObject(headLines);
  }

  //###########################################################
  overWriteAll(dominant) {
    switch (dominant) {
      case "documentation":
        this.interface = this.docmentation.toInterface();
        this.handlers = this.documentation.toHandlers();
        break;
      case "interface":
        this.documentation = this.interface.toDocumentation();
        this.handlers = this.interface.toHandlers();
        break;
      case "handlers":
        this.documentation = this.handlers.toDocumentation();
        this.interface = this.handlers.toInterface();
    }
  }

  syncUnion(dominant) {
    return this.overWriteAll(dominant);
  }

  syncIntersectIgnore(dominant) {
    return this.overWriteAll(dominant);
  }

  syncIntersectCut(dominant) {
    return this.overWriteAll(dominant);
  }

  
    //###########################################################
  getDocumentationBlock() {
    return this.documentation.headBlock;
  }

  getInterfaceBlock() {
    return this.interface.headBlock;
  }

  getHandlersBlock() {
    return this.handlers.headBlock;
  }

};
