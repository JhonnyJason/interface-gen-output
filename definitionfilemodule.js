// Generated by CoffeeScript 2.5.1
(function() {
  var HJSON, addRoute, createArgsBlock, definitionEndKey, definitionStartKey, definitionfilemodule, extractFromSlice, extractInterface, file, fs, interfaceObject, log, olog, ostr, p, print, requestKey, responseKey, routeDetect, routeKey, sliceFile, slices;

  definitionfilemodule = {
    name: "definitionfilemodule"
  };

  //###########################################################
  //region printLogFunctions
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["definitionfilemodule"] != null) {
      console.log("[definitionfilemodule]: " + arg);
    }
  };

  ostr = function(obj) {
    return JSON.stringify(obj, null, 4);
  };

  olog = function(obj) {
    return log("\n" + ostr(obj));
  };

  print = function(arg) {
    return console.log(arg);
  };

  //endregion

  //###########################################################
  //region modulesFromEnvironment
  fs = require("fs");

  HJSON = require("hjson");

  //###########################################################
  p = null;

  //###########################################################
  file = "";

  slices = [];

  //###########################################################
  interfaceObject = {
    routes: []
  };

  //###########################################################
  routeDetect = /^[a-z0-9]+/i;

  routeKey = "### /";

  requestKey = "#### request";

  responseKey = "#### response";

  definitionStartKey = "```json";

  definitionEndKey = "```";

  //endregion

  //###########################################################
  definitionfilemodule.initialize = function() {
    log("definitionfilemodule.initialize");
    p = allModules.pathmodule;
  };

  
  //###########################################################
  //region internalFunctions
  sliceFile = function() {
    var index, nextIndex;
    index = file.indexOf(routeKey);
    while (index >= 0) {
      index += routeKey.length;
      nextIndex = file.indexOf(routeKey, index);
      if (nextIndex < 0) {
        slices.push(file.slice(index));
      } else {
        slices.push(file.slice(index, nextIndex));
      }
      index = nextIndex;
    }
  };

  //###########################################################
  extractInterface = function() {
    var i, len, slice;
    for (i = 0, len = slices.length; i < len; i++) {
      slice = slices[i];
      extractFromSlice(slice);
    }
  };

  extractFromSlice = function(slice) {
    var requestDefinition, requestDefinitionEnd, requestDefinitionStart, requestDefinitionString, requestIndex, responseDefinitionEnd, responseDefinitionStart, responseDefinitionString, responseIndex, route;
    route = routeDetect.exec(slice);
    requestIndex = slice.indexOf(requestKey);
    if (requestIndex < 0) {
      throw new Error("File Corrupt! Expected '#### request' in route slice!");
    }
    requestIndex += requestKey.length;
    requestDefinitionStart = slice.indexOf(definitionStartKey, requestIndex);
    if (requestDefinitionStart < 0) {
      throw new Error("File Corrupt! Expected '```json' to start request definition!");
    }
    requestDefinitionStart += definitionStartKey.length;
    requestDefinitionEnd = slice.indexOf(definitionEndKey, requestDefinitionStart);
    if (requestDefinitionEnd < 0) {
      throw new Error("File Corrupt! Expected '```' to end request definition!");
    }
    responseIndex = slice.indexOf(responseKey, requestDefinitionEnd);
    if (responseIndex < 0) {
      throw new Error("File Corrupt! Expected '#### response' definition in route slice!");
    }
    responseIndex += responseKey.length;
    responseDefinitionStart = slice.indexOf(definitionStartKey, responseIndex);
    if (responseDefinitionStart < 0) {
      throw new Error("File Corrupt! Expected '```json' to start response definition!");
    }
    responseDefinitionStart += definitionStartKey.length;
    responseDefinitionEnd = slice.indexOf(definitionEndKey, responseDefinitionStart);
    if (responseDefinitionEnd < 0) {
      throw new Error("File Corrupt! Expected '```' to end response definition!");
    }
    requestDefinitionString = slice.slice(requestDefinitionStart, requestDefinitionEnd);
    requestDefinition = HJSON.parse(requestDefinitionString);
    responseDefinitionString = slice.slice(responseDefinitionStart, responseDefinitionEnd);
    addRoute(route, Object.keys(requestDefinition), responseDefinitionString);
  };

  //###########################################################
  addRoute = function(routeName, requestArgs, sampleResponse) {
    var routeObject;
    routeObject = {
      route: routeName,
      args: requestArgs.join(", "),
      requestBlock: "\"" + requestArgs.join("\": \"...\", \n\"") + "\": \"...\"",
      argsBlock: createArgsBlock(requestArgs),
      response: sampleResponse
    };
    interfaceObject.routes.push(routeObject);
  };

  //###########################################################
  createArgsBlock = function(argsArray) {
    return argsArray.map(function(el) {
      return "req.body." + el;
    }).join(", ");
  };

  //endregion

  //###########################################################
  //region exposedFunctions
  definitionfilemodule.digestFile = function(source) {
    p.digestPath(source);
    file = fs.readFileSync(p.absolutePath, 'utf8');
    sliceFile();
    extractInterface();
  };

  //###########################################################
  definitionfilemodule.interfaceObject = interfaceObject;

  //endregion 
  module.exports = definitionfilemodule;

}).call(this);
